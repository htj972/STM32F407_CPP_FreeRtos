#ifndef __TCP_CLIENT_DEMO_H
#define __TCP_CLIENT_DEMO_H
#include "sys.h"
#include "lwip/debug.h"
#include "lwip/stats.h"
#include "lwip/tcp.h"
#include "lwip/memp.h"
#include "lwip/mem.h"
#include "lwip_comm/lwip_comm.h"

#ifdef __cplusplus
extern "C" {
#endif
 
#define TCP_CLIENT_RX_BUFSIZE	200		//定义tcp client最大接收数据长度
#define	TCP_CLIENT_PORT			8080	//定义tcp client要连接的远端端口

//tcp服务器连接状态
enum tcp_client_states
{
	ES_TCPCLIENT_NONE = 0,		//没有连接
	ES_TCPCLIENT_CONNECTED,		//连接到服务器了 
	ES_TCPCLIENT_CLOSING,		//关闭连接
}; 
//LWIP回调函数使用的结构体
struct tcp_client_struct
{
	u8 state;               //当前连接状
	struct tcp_pcb *pcb;    //指向当前的pcb
	struct pbuf *p;         //指向接收/或传输的pbuf
};  

void tcp_client_test(void);//TCP Client测试函数
err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err);//TCP连接建立后调用回调函数
err_t tcp_client_recv(void *arg,struct tcp_pcb *tpcb,struct pbuf *p,err_t err);//tcp_recv()函数的回调函数
void tcp_client_error(void *arg,err_t err);//tcp_err()回调函数
err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb);//tcp_poll()回调函数
err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len);//tcp_sent()回调函数
void tcp_client_senddata(struct tcp_pcb *tpcb, struct tcp_client_struct * es);//TCP Client发送数据
void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct * es );//关闭TCP Client连接

void tcp_send_data(u8 *data);//TCP发送数据

#ifdef __cplusplus
}
#endif

#endif























